var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class StateStorageDb {
    constructor(storageClient) {
        this.keyPrefix = 'dag4-';
        this.defaultStorage = (typeof window !== 'undefined' && window.hasOwnProperty('localStorage')) ? window.localStorage : undefined;
        this.storageClient = storageClient || this.defaultStorage;
    }
    setClient(client) {
        this.storageClient = client || this.defaultStorage;
    }
    setPrefix(prefix) {
        if (!prefix) {
            prefix = 'dag4-';
        }
        else if (prefix.charAt(prefix.length - 1) !== '-') {
            prefix += '-';
        }
        this.keyPrefix = prefix;
    }
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storageClient.setItem(this.keyPrefix + key, JSON.stringify(value));
        });
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield this.storageClient.getItem(this.keyPrefix + key);
            if (value) {
                return JSON.parse(value);
            }
        });
    }
    delete(key) {
        this.storageClient.removeItem(this.keyPrefix + key);
    }
}
//# sourceMappingURL=state-storage-db.js.map