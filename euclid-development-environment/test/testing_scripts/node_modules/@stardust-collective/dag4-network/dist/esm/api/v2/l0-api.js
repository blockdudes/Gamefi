var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { RestApi } from "@stardust-collective/dag4-core";
import { DNC } from "../../DNC";
class L0Api {
    constructor(host) {
        this.service = new RestApi(DNC.L0_URL);
        if (host) {
            this.config().baseUrl(host);
        }
    }
    config() {
        return this.service.configure();
    }
    // Cluster Info
    getClusterInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service
                .$get("/cluster/info")
                .then((info) => this.processClusterInfo(info));
        });
    }
    getClusterInfoWithRetry() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service
                .$get("/cluster/info", null, { retry: 5 })
                .then((info) => this.retryClusterInfo(info));
        });
    }
    retryClusterInfo(info) {
        if (info && info.map) {
            return this.processClusterInfo(info);
        }
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve(this.getClusterInfoWithRetry());
            }, 1000);
        });
    }
    processClusterInfo(info) {
        return (info &&
            info.map &&
            info.map((d) => ({
                alias: d.alias,
                walletId: d.id.hex,
                ip: d.ip.host,
                status: d.status,
                reputation: d.reputation,
            })));
    }
    // Metrics
    getMetrics() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: add parsing for v2 response... returns weird string
            return this.service.$get("/metric");
        });
    }
    // DAG
    getTotalSupply() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get("/dag/total-supply");
        });
    }
    getTotalSupplyAtOrdinal(ordinal) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/dag/${ordinal}/total-supply`);
        });
    }
    getAddressBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/dag/${address}/balance`);
        });
    }
    getAddressBalanceAtOrdinal(ordinal, address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/dag/${ordinal}/${address}/balance`);
        });
    }
    // Global Snapshot
    getLatestSnapshot() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/global-snapshots/latest`, {}, { headers: { Accept: "application/json" } });
        });
    }
    getLatestSnapshotOrdinal() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/global-snapshots/latest/ordinal`);
        });
    }
    getSnapshot(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/global-snapshots/${id}`, {}, { headers: { Accept: "application/json" } });
        });
    }
    // State Channels
    postStateChannelSnapshot(address, snapshot) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$post(`/state-channel/${address}/snapshot`, snapshot);
        });
    }
}
const l0Api = new L0Api();
export { L0Api, l0Api };
//# sourceMappingURL=l0-api.js.map