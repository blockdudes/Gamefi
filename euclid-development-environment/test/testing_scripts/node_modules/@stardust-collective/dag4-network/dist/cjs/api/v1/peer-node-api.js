"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.peerNodeApi = exports.PeerNodeApi = void 0;
const dag4_core_1 = require("@stardust-collective/dag4-core");
const peer_metrics_1 = require("../../dto/v1/peer-metrics");
class PeerNodeApi {
    constructor(mHost = '') {
        this.mHost = mHost;
        this.service = new dag4_core_1.RestApi('');
    }
    //health ping
    getHealth() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get('health');
        });
    }
    getMetrics() {
        return __awaiter(this, void 0, void 0, function* () {
            const startTime = Date.now();
            //, null, { retry: 1 }
            return this.service.$get('metrics').then(rawData => peer_metrics_1.PeerMetrics.parse(rawData.metrics, Date.now() - startTime));
        });
    }
    //micrometer-metrics
    getMicroMetrics() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get('micrometer-metrics');
        });
    }
    getTotalSupply() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get('total-supply');
        });
    }
    getAddressBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get('/address/' + address);
        });
    }
    getAddressLastAcceptedTransactionRef(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get('/transaction/last-ref/' + address);
        });
    }
    postTransaction(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$post('/transaction', tx);
        });
    }
    checkTransaction(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get('/transaction/' + hash);
        });
    }
    getClusterInfo() {
        return this.service.$get('cluster/info').then(info => this.processClusterInfo(info));
    }
    set host(val) {
        if (!val.startsWith('http')) {
            val = 'http://' + val;
        }
        if (!val.includes(':', 8)) {
            val = val + ':9000/';
        }
        this.mHost = val;
        this.service.configure().baseUrl(val);
    }
    get host() {
        return this.mHost;
    }
    processClusterInfo(info) {
        return info && info.map(d => ({ alias: d.alias, walletId: d.id.hex, ip: d.ip.host, status: d.status, reputation: d.reputation }));
    }
}
exports.PeerNodeApi = PeerNodeApi;
exports.peerNodeApi = new PeerNodeApi();
//# sourceMappingURL=peer-node-api.js.map