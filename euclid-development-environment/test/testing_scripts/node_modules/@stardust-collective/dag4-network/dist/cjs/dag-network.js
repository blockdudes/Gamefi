"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DagNetwork = void 0;
const rxjs_1 = require("rxjs");
const load_balancer_api_1 = require("./api/v1/load-balancer-api");
const block_explorer_api_1 = require("./api/v1/block-explorer-api");
const l0_api_1 = require("./api/v2/l0-api");
const l1_api_1 = require("./api/v2/l1-api");
const block_explorer_api_2 = require("./api/v2/block-explorer-api");
class DagNetwork {
    constructor(netInfo) {
        this.connectedNetwork = { id: 'main', beUrl: '', lbUrl: '', l0Url: '', l1Url: '' };
        this.networkChange$ = new rxjs_1.Subject();
        this.loadBalancerApi = new load_balancer_api_1.LoadBalancerApi();
        this.blockExplorerApi = new block_explorer_api_1.BlockExplorerApi();
        this.blockExplorerV2Api = new block_explorer_api_2.BlockExplorerV2Api();
        this.l0Api = new l0_api_1.L0Api();
        this.l1Api = new l1_api_1.L1Api();
        if (netInfo) {
            this.setNetwork(netInfo);
        }
    }
    config(netInfo) {
        if (netInfo) {
            this.setNetwork(netInfo);
        }
        else {
            return this.getNetwork();
        }
    }
    observeNetworkChange() {
        return this.networkChange$;
    }
    //Configure the network of the global instances: blockExplorerApi and loadBalancerApi
    setNetwork(netInfo) {
        if (this.connectedNetwork !== netInfo) {
            this.connectedNetwork = netInfo;
            if (netInfo.networkVersion === '2.0') {
                this.blockExplorerV2Api.config().baseUrl(netInfo.beUrl);
                this.l0Api.config().baseUrl(netInfo.l0Url);
                this.l1Api.config().baseUrl(netInfo.l1Url);
            }
            else { // v1
                this.blockExplorerApi.config().baseUrl(netInfo.beUrl);
                this.loadBalancerApi.config().baseUrl(netInfo.lbUrl);
            }
            this.networkChange$.next(netInfo);
        }
    }
    getNetwork() {
        return this.connectedNetwork;
    }
    getNetworkVersion() {
        return this.connectedNetwork.networkVersion;
    }
    getAddressBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.getNetworkVersion() === '2.0') {
                return this.l0Api.getAddressBalance(address);
            }
            return this.loadBalancerApi.getAddressBalance(address);
        });
    }
    getAddressLastAcceptedTransactionRef(address) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.getNetworkVersion() === '2.0') {
                return this.l1Api.getAddressLastAcceptedTransactionRef(address);
            }
            return this.loadBalancerApi.getAddressLastAcceptedTransactionRef(address);
        });
    }
    getPendingTransaction(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.getNetworkVersion() === '2.0') {
                let pendingTransaction = null;
                try {
                    pendingTransaction = yield this.l1Api.getPendingTransaction(hash);
                }
                catch (e) {
                    // NOOP 404
                }
                return pendingTransaction;
            }
            return this.loadBalancerApi.getTransaction(hash);
        });
    }
    getTransactionsByAddress(address, limit, searchAfter) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.getNetworkVersion() === '2.0') {
                let response = null;
                try {
                    response = yield this.blockExplorerV2Api.getTransactionsByAddress(address, limit, searchAfter);
                }
                catch (e) {
                    // NOOP 404
                }
                return response ? response.data : null;
            }
            return this.blockExplorerApi.getTransactionsByAddress(address, limit, searchAfter);
        });
    }
    getTransaction(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.getNetworkVersion() === '2.0') {
                let response = null;
                try {
                    response = yield this.blockExplorerV2Api.getTransaction(hash);
                }
                catch (e) {
                    // NOOP 404
                }
                return response ? response.data : null;
            }
            return this.blockExplorerApi.getTransaction(hash);
        });
    }
    postTransaction(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.getNetworkVersion() === '2.0') {
                const response = yield this.l1Api.postTransaction(tx);
                // Support data/meta format and object return format
                return response.data ? response.data.hash : response.hash;
            }
            return this.loadBalancerApi.postTransaction(tx);
        });
    }
    getLatestSnapshot() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.getNetworkVersion() === '2.0') {
                const response = yield this.blockExplorerV2Api.getLatestSnapshot();
                return response.data;
            }
            return this.blockExplorerApi.getLatestSnapshot();
        });
    }
}
exports.DagNetwork = DagNetwork;
//# sourceMappingURL=dag-network.js.map