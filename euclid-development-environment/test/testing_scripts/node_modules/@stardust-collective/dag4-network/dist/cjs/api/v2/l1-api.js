"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.l1Api = exports.L1Api = void 0;
const dag4_core_1 = require("@stardust-collective/dag4-core");
const DNC_1 = require("../../DNC");
class L1Api {
    constructor(host) {
        this.service = new dag4_core_1.RestApi(DNC_1.DNC.L1_URL);
        if (host) {
            this.config().baseUrl(host);
        }
    }
    config() {
        return this.service.configure();
    }
    getMetrics() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: add parsing for v2 response... returns 404
            return this.service.$get("/metric");
        });
    }
    getAddressLastAcceptedTransactionRef(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/transactions/last-reference/${address}`);
        });
    }
    getPendingTransaction(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/transactions/${hash}`);
        });
    }
    postTransaction(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$post("/transactions", tx);
        });
    }
    getClusterInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service
                .$get("/cluster/info")
                .then((info) => this.processClusterInfo(info));
        });
    }
    getClusterInfoWithRetry() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service
                .$get("/cluster/info", null, { retry: 5 })
                .then((info) => this.retryClusterInfo(info));
        });
    }
    retryClusterInfo(info) {
        if (info && info.map) {
            return this.processClusterInfo(info);
        }
        else {
            return new Promise((resolve) => {
                setTimeout(() => {
                    resolve(this.getClusterInfoWithRetry());
                }, 1000);
            });
        }
    }
    processClusterInfo(info) {
        return (info &&
            info.map &&
            info.map((d) => ({
                alias: d.alias,
                walletId: d.id.hex,
                ip: d.ip.host,
                status: d.status,
                reputation: d.reputation,
            })));
    }
}
exports.L1Api = L1Api;
const l1Api = new L1Api();
exports.l1Api = l1Api;
//# sourceMappingURL=l1-api.js.map