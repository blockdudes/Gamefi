"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.blockExplorerApi = exports.BlockExplorerV2Api = void 0;
const dag4_core_1 = require("@stardust-collective/dag4-core");
const DNC_1 = require("../../DNC");
class BlockExplorerV2Api {
    constructor(host) {
        this.service = new dag4_core_1.RestApi(DNC_1.DNC.BLOCK_EXPLORER_URL);
        if (host) {
            this.config().baseUrl(host);
        }
    }
    config() {
        return this.service.configure();
    }
    // Snapshots
    getSnapshot(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/global-snapshots/${id}`);
        });
    }
    getTransactionsBySnapshot(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/global-snapshots/${id}/transactions`);
        });
    }
    getRewardsBySnapshot(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/global-snapshots/${id}/rewards`);
        });
    }
    getLatestSnapshot() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get('/global-snapshots/latest');
        });
    }
    getLatestSnapshotTransactions() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get('/global-snapshots/latest/transactions');
        });
    }
    getLatestSnapshotRewards() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get('/global-snapshots/latest/rewards');
        });
    }
    // Transactions
    _formatDate(date, paramName) {
        try {
            return new Date(date).toISOString();
        }
        catch (e) {
            throw new Error(`ParamError: "${paramName}" is not valid ISO 8601`);
        }
    }
    _getTransactionSearchPathAndParams(basePath, limit, searchAfter, sentOnly, receivedOnly, searchBefore) {
        let params, path = basePath;
        if (limit || searchAfter || searchBefore) {
            params = {};
            if (limit > 0) {
                params.limit = limit;
            }
            if (searchAfter) {
                params.search_after = searchAfter;
            }
            else if (searchBefore) {
                params.search_before = searchBefore;
            }
        }
        if (sentOnly) {
            path += '/sent';
        }
        else if (receivedOnly) {
            path += '/received';
        }
        return { path, params };
    }
    getTransactions(limit, searchAfter, searchBefore) {
        return __awaiter(this, void 0, void 0, function* () {
            const basePath = `/transactions`;
            const { path, params } = this._getTransactionSearchPathAndParams(basePath, limit, searchAfter, false, false, searchBefore);
            return this.service.$get(path, params);
        });
    }
    getTransactionsByAddress(address, limit = 0, searchAfter = '', sentOnly = false, receivedOnly = false, searchBefore = '') {
        return __awaiter(this, void 0, void 0, function* () {
            const basePath = `/addresses/${address}/transactions`;
            const { path, params } = this._getTransactionSearchPathAndParams(basePath, limit, searchAfter, sentOnly, receivedOnly, searchBefore);
            return this.service.$get(path, params);
        });
    }
    getTransaction(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/transactions/${hash}`);
        });
    }
    // Addresses
    getAddressBalance(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/addresses/${hash}/balance`);
        });
    }
    // Blocks
    getCheckpointBlock(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/blocks/${hash}`);
        });
    }
    // Metagraphs
    getLatestCurrencySnapshot(metagraphId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/currency/${metagraphId}/snapshots/latest`);
        });
    }
    getCurrencySnapshot(metagraphId, hashOrOrdinal) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/currency/${metagraphId}/snapshots/${hashOrOrdinal}`);
        });
    }
    getLatestCurrencySnapshotRewards(metagraphId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/currency/${metagraphId}/snapshots/latest/rewards`);
        });
    }
    getCurrencySnapshotRewards(metagraphId, hashOrOrdinal) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/currency/${metagraphId}/snapshots/${hashOrOrdinal}/rewards`);
        });
    }
    getCurrencyBlock(metagraphId, hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/currency/${metagraphId}/blocks/${hash}`);
        });
    }
    getCurrencyAddressBalance(metagraphId, hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/currency/${metagraphId}/addresses/${hash}/balance`);
        });
    }
    getCurrencyTransaction(metagraphId, hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.service.$get(`/currency/${metagraphId}/transactions/${hash}`);
        });
    }
    getCurrencyTransactions(metagraphId, limit, searchAfter, searchBefore) {
        return __awaiter(this, void 0, void 0, function* () {
            const basePath = `/currency/${metagraphId}/transactions`;
            const { path, params } = this._getTransactionSearchPathAndParams(basePath, limit, searchAfter, false, false, searchBefore);
            return this.service.$get(path, params);
        });
    }
    getCurrencyTransactionsByAddress(metagraphId, address, limit = 0, searchAfter = '', sentOnly = false, receivedOnly = false, searchBefore = '') {
        return __awaiter(this, void 0, void 0, function* () {
            const basePath = `/currency/${metagraphId}/addresses/${address}/transactions`;
            const { path, params } = this._getTransactionSearchPathAndParams(basePath, limit, searchAfter, sentOnly, receivedOnly, searchBefore);
            return this.service.$get(path, params);
        });
    }
    getCurrencyTransactionsBySnapshot(metagraphId, hashOrOrdinal, limit = 0, searchAfter = '', searchBefore = '') {
        return __awaiter(this, void 0, void 0, function* () {
            const basePath = `/currency/${metagraphId}/snapshots/${hashOrOrdinal}/transactions`;
            const { path, params } = this._getTransactionSearchPathAndParams(basePath, limit, searchAfter, false, false, searchBefore);
            return this.service.$get(path, params);
        });
    }
}
exports.BlockExplorerV2Api = BlockExplorerV2Api;
exports.blockExplorerApi = new BlockExplorerV2Api();
//# sourceMappingURL=block-explorer-api.js.map