import { MetagraphNetworkInfo } from "./types/network-info";
import { PostTransactionV2, PendingTransaction, TransactionV2, CurrencySnapshot } from "./dto/v2";
import { BlockExplorerV2Api } from './api/v2/block-explorer-api';
import { MetagraphTokenL0Api } from "./api/metagraph-token/l0-api";
import { MetagraphTokenL1Api } from "./api/metagraph-token/l1-api";
declare class MetagraphTokenNetwork {
    private connectedNetwork;
    l0Api: MetagraphTokenL0Api;
    l1Api: MetagraphTokenL1Api;
    beApi: BlockExplorerV2Api;
    constructor(netInfo: MetagraphNetworkInfo);
    getNetwork(): MetagraphNetworkInfo;
    getAddressBalance(address: string): Promise<import("./dto/v2").L0AddressBalance>;
    getAddressLastAcceptedTransactionRef(address: string): Promise<import("./dto/v2").TransactionReference>;
    getPendingTransaction(hash: string | null): Promise<null | PendingTransaction>;
    getTransactionsByAddress(address: string, limit?: number, searchAfter?: string): Promise<TransactionV2[]>;
    getTransaction(hash: string | null): Promise<null | TransactionV2>;
    postTransaction(tx: PostTransactionV2): Promise<string>;
    getLatestSnapshot(): Promise<CurrencySnapshot>;
}
export { MetagraphTokenNetwork };
