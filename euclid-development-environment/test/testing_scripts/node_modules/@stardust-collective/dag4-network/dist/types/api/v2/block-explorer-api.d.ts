import { SnapshotV2, TransactionV2, GetTransactionResponseV2, RewardTransaction, AddressBalanceV2, BlockV2, CurrencySnapshot } from '../../dto/v2';
declare type HashOrOrdinal = string | number;
export declare class BlockExplorerV2Api {
    private service;
    constructor(host?: string);
    config(): import("@stardust-collective/dag4-core").RestConfig;
    getSnapshot(id: HashOrOrdinal): Promise<SnapshotV2>;
    getTransactionsBySnapshot(id: HashOrOrdinal): Promise<TransactionV2[]>;
    getRewardsBySnapshot(id: HashOrOrdinal): Promise<RewardTransaction>;
    getLatestSnapshot(): Promise<SnapshotV2>;
    getLatestSnapshotTransactions(): Promise<TransactionV2>;
    getLatestSnapshotRewards(): Promise<RewardTransaction>;
    _formatDate(date: string, paramName: string): string;
    _getTransactionSearchPathAndParams(basePath: string, limit: any, searchAfter: any, sentOnly: any, receivedOnly: any, searchBefore: any): {
        path: string;
        params: any;
    };
    getTransactions(limit: any, searchAfter: any, searchBefore: any): Promise<TransactionV2[]>;
    getTransactionsByAddress(address: string, limit?: number, searchAfter?: string, sentOnly?: boolean, receivedOnly?: boolean, searchBefore?: string): Promise<TransactionV2[]>;
    getTransaction(hash: string): Promise<GetTransactionResponseV2>;
    getAddressBalance(hash: string): Promise<AddressBalanceV2>;
    getCheckpointBlock(hash: string): Promise<BlockV2>;
    getLatestCurrencySnapshot(metagraphId: string): Promise<CurrencySnapshot>;
    getCurrencySnapshot(metagraphId: string, hashOrOrdinal: string): Promise<CurrencySnapshot>;
    getLatestCurrencySnapshotRewards(metagraphId: string): Promise<RewardTransaction>;
    getCurrencySnapshotRewards(metagraphId: string, hashOrOrdinal: string): Promise<RewardTransaction>;
    getCurrencyBlock(metagraphId: string, hash: string): Promise<BlockV2>;
    getCurrencyAddressBalance(metagraphId: string, hash: string): Promise<AddressBalanceV2>;
    getCurrencyTransaction(metagraphId: string, hash: string): Promise<GetTransactionResponseV2>;
    getCurrencyTransactions(metagraphId: string, limit: any, searchAfter: any, searchBefore: any): Promise<TransactionV2[]>;
    getCurrencyTransactionsByAddress(metagraphId: string, address: string, limit?: number, searchAfter?: string, sentOnly?: boolean, receivedOnly?: boolean, searchBefore?: string): Promise<TransactionV2[]>;
    getCurrencyTransactionsBySnapshot(metagraphId: string, hashOrOrdinal: string, limit?: number, searchAfter?: string, searchBefore?: string): Promise<TransactionV2[]>;
}
export declare const blockExplorerApi: BlockExplorerV2Api;
export {};
