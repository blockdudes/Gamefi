import { KeyTrio, PostTransaction, PostTransactionV2 } from "@stardust-collective/dag4-keystore";
import { GlobalDagNetwork, DagNetwork, NetworkInfo, PendingTx, TransactionReference, Transaction, TransactionV2, MetagraphNetworkInfo } from "@stardust-collective/dag4-network";
import { Subject } from "rxjs";
import { MetagraphTokenClient } from "./metagraph-token-client";
export declare class DagAccount {
    private m_keyTrio;
    private sessionChange$;
    private network;
    constructor(network: DagNetwork | GlobalDagNetwork);
    connect(networkInfo: Omit<NetworkInfo, "id"> & {
        id?: string;
    }, useDefaultConfig?: boolean): this;
    get address(): string;
    get keyTrio(): KeyTrio;
    get publicKey(): string;
    get networkInstance(): DagNetwork | GlobalDagNetwork;
    loginSeedPhrase(words: string): void;
    loginPrivateKey(privateKey: string): void;
    loginPublicKey(publicKey: string): void;
    isActive(): boolean;
    logout(): void;
    observeSessionChange(): Subject<boolean>;
    setKeysAndAddress(privateKey: string, publicKey: string, address: string): void;
    getTransactions(limit?: number, searchAfter?: string): Promise<Transaction[] | TransactionV2[]>;
    validateDagAddress(address: string): boolean;
    getBalance(): Promise<number>;
    getBalanceFor(address: string): Promise<number>;
    getFeeRecommendation(): Promise<number>;
    generateSignedTransaction(toAddress: string, amount: number, fee?: number, lastRef?: any): Promise<PostTransaction | PostTransactionV2>;
    generateSignedTransactionWithHash(toAddress: string, amount: number, fee?: number, lastRef?: any): Promise<{
        transaction: PostTransaction | PostTransactionV2;
        hash: string;
    }>;
    transferDag(toAddress: string, amount: number, fee?: number, autoEstimateFee?: boolean): Promise<PendingTx>;
    waitForCheckPointAccepted(hash: string): Promise<boolean>;
    waitForBalanceChange(initialValue?: number): Promise<boolean>;
    private wait;
    generateBatchTransactions(transfers: TransferBatchItem[], lastRef?: TransactionReference): Promise<any[]>;
    sendBatchTransactions(transactions: PostTransactionV2[]): Promise<any[]>;
    transferDagBatch(transfers: TransferBatchItem[], lastRef?: TransactionReference): Promise<any[]>;
    createMetagraphTokenClient(networkInfo: MetagraphNetworkInfo): MetagraphTokenClient;
}
declare type TransferBatchItem = {
    address: string;
    amount: number;
    fee?: number;
};
export {};
