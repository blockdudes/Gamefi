import { PostTransactionV2 } from "@stardust-collective/dag4-keystore";
import { PendingTx, TransactionReference, MetagraphTokenNetwork, MetagraphNetworkInfo } from "@stardust-collective/dag4-network";
import type { DagAccount } from "./dag-account";
declare class MetagraphTokenClient {
    private account;
    private networkInfo;
    private tokenDecimals;
    private network;
    constructor(account: DagAccount, networkInfo: MetagraphNetworkInfo, tokenDecimals?: number);
    get networkInstance(): MetagraphTokenNetwork;
    get address(): string;
    getTransactions(limit?: number, searchAfter?: string): Promise<import("@stardust-collective/dag4-network").TransactionV2[]>;
    getBalance(): Promise<number>;
    getBalanceFor(address: string): Promise<number>;
    getFeeRecommendation(): Promise<number>;
    transfer(toAddress: string, amount: number, fee?: number, autoEstimateFee?: boolean): Promise<PendingTx>;
    waitForBalanceChange(initialValue?: number): Promise<boolean>;
    private wait;
    generateBatchTransactions(transfers: TransferBatchItem[], lastRef?: TransactionReference): Promise<any[]>;
    sendBatchTransactions(transactions: PostTransactionV2[]): Promise<any[]>;
    transferBatch(transfers: TransferBatchItem[], lastRef?: TransactionReference): Promise<any[]>;
}
declare type TransferBatchItem = {
    address: string;
    amount: number;
    fee?: number;
};
export { MetagraphTokenClient };
