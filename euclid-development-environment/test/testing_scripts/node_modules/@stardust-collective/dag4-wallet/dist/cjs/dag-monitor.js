"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DagMonitor = void 0;
const dag4_core_1 = require("@stardust-collective/dag4-core");
const dag4_network_1 = require("@stardust-collective/dag4-network");
const rxjs_1 = require("rxjs");
const TWELVE_MINUTES = 12 * 60 * 1000;
class DagMonitor {
    constructor(dagAccount) {
        this.dagAccount = dagAccount;
        this.memPoolChange$ = new rxjs_1.Subject();
        this.pendingTimer = 0;
        this.waitForMap = {};
        this.cacheUtils.setPrefix('stargazer-');
    }
    observeMemPoolChange() {
        return this.memPoolChange$;
    }
    addToMemPoolMonitor(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const networkInfo = this.dagAccount.networkInstance.getNetwork();
            const key = `network-${networkInfo.id}-mempool`;
            let payload = (yield this.cacheUtils.get(key)) || [];
            let tx = value;
            if (typeof value === 'string') {
                tx = { hash: value, timestamp: Date.now() };
            }
            if (!payload || !payload.some) {
                payload = [];
            }
            if (!payload.some(p => p.hash === tx.hash)) {
                payload.push(tx);
                yield this.cacheUtils.set(key, payload);
                this.lastTimer = Date.now();
                this.pendingTimer = 1000;
            }
            setTimeout(() => this.pollPendingTxs(), 1000);
            return this.transformPendingToTransaction(tx);
        });
    }
    getLatestTransactions(address, limit, searchAfter) {
        return __awaiter(this, void 0, void 0, function* () {
            const cTxs = yield this.dagAccount.networkInstance.getTransactionsByAddress(address, limit, searchAfter);
            const { pendingTxs } = yield this.processPendingTxs();
            const pendingTransactions = pendingTxs.map(pending => this.transformPendingToTransaction(pending));
            if (cTxs && cTxs.length) {
                return pendingTransactions.concat(cTxs);
            }
            return pendingTransactions;
        });
    }
    getMemPoolFromMonitor(address) {
        return __awaiter(this, void 0, void 0, function* () {
            address = address || this.dagAccount.address;
            const networkInfo = this.dagAccount.networkInstance.getNetwork();
            let txs = [];
            try {
                txs = yield this.cacheUtils.get(`network-${networkInfo.id}-mempool`);
            }
            catch (err) {
                console.log('getMemPoolFromMonitor err: ', err);
                console.log(err.stack);
                return [];
            }
            if (!txs) {
                txs = [];
            }
            return txs.filter(tx => !address || !tx.receiver || tx.receiver === address || tx.sender === address);
        });
    }
    setToMemPoolMonitor(pool) {
        return __awaiter(this, void 0, void 0, function* () {
            const networkInfo = this.dagAccount.networkInstance.getNetwork();
            const key = `network-${networkInfo.id}-mempool`;
            yield this.cacheUtils.set(key, pool);
        });
    }
    waitForTransaction(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.waitForMap[hash]) {
                const waitFor = {};
                waitFor.promise = new Promise(resolve => waitFor.resolve = resolve);
                this.waitForMap[hash] = waitFor;
            }
            return this.waitForMap[hash].promise;
        });
    }
    startMonitor() {
        this.pollPendingTxs();
    }
    transformPendingToTransaction(pending) {
        const { hash, amount, receiver, sender, timestamp, ordinal, fee, status } = pending;
        const networkVersion = this.dagAccount.networkInstance.getNetworkVersion();
        if (networkVersion === '2.0') {
            // TODO: Check TransactionV2 fields
            return {
                hash,
                source: sender,
                destination: receiver,
                amount,
                fee,
                parent: { ordinal, hash: '' },
                snapshot: '',
                block: '',
                timestamp: new Date(timestamp).toISOString(),
                transactionOriginal: { ordinal, hash },
            };
        }
        return {
            hash,
            amount,
            receiver,
            sender,
            fee,
            status,
            isDummy: false,
            timestamp: new Date(timestamp).toISOString(),
            lastTransactionRef: { ordinal, prevHash: '' },
            snapshotHash: '',
            checkpointBlock: '',
        };
    }
    pollPendingTxs() {
        return __awaiter(this, void 0, void 0, function* () {
            if (Date.now() - this.lastTimer + 1000 < this.pendingTimer) {
                console.log('canceling extra timer');
                return; //ignore any repeat timers that happen before the min timer
            }
            const { pendingTxs, txChanged, transTxs, pendingHasConfirmed, poolCount } = yield this.processPendingTxs();
            //Has any memPollTxs pending
            if (pendingTxs.length) {
                yield this.setToMemPoolMonitor(pendingTxs);
                this.pendingTimer = 10000;
                this.lastTimer = Date.now();
                setTimeout(() => this.pollPendingTxs(), 10000);
            }
            else if (poolCount > 0) {
                //NOTE: All tx in persisted pool have completed
                yield this.setToMemPoolMonitor([]);
            }
            this.memPoolChange$.next({
                txChanged, transTxs, pendingHasConfirmed
            });
        });
    }
    processPendingTxs() {
        return __awaiter(this, void 0, void 0, function* () {
            const pool = yield this.getMemPoolFromMonitor();
            const transTxs = [];
            const nextPool = [];
            let pendingHasConfirmed = false;
            let txChanged = false;
            const networkVersion = this.dagAccount.networkInstance.getNetworkVersion();
            for (let index = 0; index < pool.length; index++) {
                const pendingTx = pool[index];
                const txHash = pendingTx.hash;
                let cbTx;
                if (networkVersion === '1.0') {
                    try {
                        // TODO: Check if we need to update this line for 2.0
                        cbTx = yield dag4_network_1.loadBalancerApi.getTransaction(txHash);
                    }
                    catch (e) { }
                }
                if (cbTx) {
                    if (!pendingTx.sender) {
                        const edge = cbTx.transaction.edge;
                        pendingTx.sender = edge.observationEdge.parents[0].hashReference;
                        pendingTx.receiver = edge.observationEdge.parents[1].hashReference;
                        pendingTx.amount = edge.data.amount;
                        pendingTx.fee = edge.data.fee;
                        pendingTx.ordinal = cbTx.transaction.lastTxRef.ordinal;
                    }
                    if (cbTx.cbBaseHash) {
                        if (pendingTx.status !== 'CHECKPOINT_ACCEPTED') {
                            txChanged = true;
                            pendingTx.status = 'CHECKPOINT_ACCEPTED';
                            pendingTx.pendingMsg = 'Accepted into check-point block...';
                        }
                    }
                    else if (pendingTx.status !== 'MEM_POOL') {
                        txChanged = true;
                        pendingTx.status = 'MEM_POOL';
                        pendingTx.pendingMsg = 'Accepted into mem-pool...';
                    }
                    pendingTx.timestamp = cbTx.rxTime;
                    //pending-tx still waiting on Node
                    nextPool.push(pendingTx);
                }
                else {
                    let beTx;
                    try {
                        beTx = yield this.dagAccount.networkInstance.getTransaction(txHash);
                    }
                    catch (e) { }
                    if (beTx) {
                        //NOTE: not needed as it is already confirmed
                        // if (!pendingTx.sender) {
                        //   pendingTx.sender = beTx.sender;
                        //   pendingTx.receiver = beTx.receiver;
                        //   pendingTx.amount = beTx.amount;
                        //   pendingTx.fee = beTx.fee;
                        //   pendingTx.ordinal = beTx.lastTransactionRef.ordinal;
                        // }
                        pendingTx.timestamp = new Date(beTx.timestamp).valueOf();
                        pendingHasConfirmed = true;
                        txChanged = true;
                        pendingTx.pending = false;
                        pendingTx.status = 'CONFIRMED';
                        pendingTx.pendingMsg = 'Confirmed';
                        if (this.waitForMap[txHash]) {
                            this.waitForMap[txHash].resolve(true);
                            this.waitForMap[txHash] = null;
                        }
                    }
                    else {
                        if (pendingTx.status !== 'CHECKPOINT_ACCEPTED' && pendingTx.status !== 'GLOBAL_STATE_PENDING' && pendingTx.timestamp + TWELVE_MINUTES > Date.now()) {
                            //TX has been dropped
                            pendingTx.status = 'DROPPED';
                            pendingTx.pending = false;
                            txChanged = true;
                        }
                        else {
                            if (pendingTx.status !== 'GLOBAL_STATE_PENDING') {
                                pendingTx.status = 'GLOBAL_STATE_PENDING';
                                pendingTx.pendingMsg = 'Will confirm shortly...';
                                txChanged = true;
                            }
                            else if (!pendingTx.status) {
                                pendingTx.status = 'UNKNOWN';
                                pendingTx.pendingMsg = 'Transaction not found...';
                                txChanged = true;
                            }
                            //pending-tx transitioning from Node to BlockExplorer
                            nextPool.push(pendingTx);
                        }
                    }
                }
                transTxs.push(pendingTx);
            }
            return { pendingTxs: nextPool, txChanged, transTxs, pendingHasConfirmed, poolCount: pool.length };
        });
    }
    get cacheUtils() {
        return dag4_core_1.crossPlatformDi.getStateStorageDb();
    }
}
exports.DagMonitor = DagMonitor;
// class MonitorPendingTx {
//   hash: string;
//   sender: string;
//   receiver: string;
//   amount: number;
//   ordinal: number;
//   pending = true;
//   pendingMsg: string;
// }
//# sourceMappingURL=dag-monitor.js.map