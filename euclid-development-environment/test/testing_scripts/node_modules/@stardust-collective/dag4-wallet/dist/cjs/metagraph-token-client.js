"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetagraphTokenClient = void 0;
const dag4_core_1 = require("@stardust-collective/dag4-core");
const dag4_network_1 = require("@stardust-collective/dag4-network");
const bignumber_js_1 = require("bignumber.js");
class MetagraphTokenClient {
    constructor(account, networkInfo, tokenDecimals = dag4_core_1.DAG_DECIMALS) {
        this.account = account;
        this.networkInfo = networkInfo;
        this.tokenDecimals = tokenDecimals;
        this.network = new dag4_network_1.MetagraphTokenNetwork(this.networkInfo);
    }
    get networkInstance() {
        return this.network;
    }
    get address() {
        return this.account.address;
    }
    getTransactions(limit, searchAfter) {
        return this.network.getTransactionsByAddress(this.address, limit, searchAfter);
    }
    getBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getBalanceFor(this.address);
        });
    }
    getBalanceFor(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const addressObj = yield this.network.getAddressBalance(address);
            if (addressObj && !isNaN(addressObj.balance)) {
                return new bignumber_js_1.BigNumber(addressObj.balance)
                    .multipliedBy(this.tokenDecimals)
                    .toNumber();
            }
            return 0;
        });
    }
    getFeeRecommendation() {
        return __awaiter(this, void 0, void 0, function* () {
            //Get last tx ref
            const lastRef = yield this.network.getAddressLastAcceptedTransactionRef(this.address);
            if (!lastRef.hash) {
                return 0;
            }
            //Check for pending TX
            const lastTx = yield this.network.getPendingTransaction(lastRef.hash);
            if (!lastTx) {
                return 0;
            }
            return 1 / this.tokenDecimals;
        });
    }
    transfer(toAddress, amount, fee = 0, autoEstimateFee = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let normalizedAmount = Math.floor(new bignumber_js_1.BigNumber(amount).multipliedBy(this.tokenDecimals).toNumber());
            const lastRef = yield this.network.getAddressLastAcceptedTransactionRef(this.address);
            if (fee === 0 && autoEstimateFee) {
                const tx = yield this.network.getPendingTransaction(lastRef.prevHash || lastRef.hash);
                if (tx) {
                    const addressObj = yield this.network.getAddressBalance(this.address);
                    //Check to see if sending max amount
                    if (addressObj.balance === normalizedAmount) {
                        amount -= this.tokenDecimals;
                        normalizedAmount--;
                    }
                    fee = this.tokenDecimals;
                }
            }
            const tx = yield this.account.generateSignedTransaction(toAddress, amount, fee, lastRef);
            if ("edge" in tx) {
                throw new Error("Unable to post v1 transaction");
            }
            const txHash = yield this.network.postTransaction(tx);
            if (txHash) {
                return {
                    timestamp: Date.now(),
                    hash: txHash,
                    amount: amount,
                    receiver: toAddress,
                    fee,
                    sender: this.address,
                    ordinal: lastRef.ordinal,
                    pending: true,
                    status: "POSTED",
                };
            }
        });
    }
    waitForBalanceChange(initialValue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (initialValue === undefined) {
                initialValue = yield this.getBalance();
                yield this.wait(5);
            }
            let changed = false;
            //Run for a max of 2 minutes (5 * 24 times)
            for (let i = 1; i < 24; i++) {
                const result = yield this.getBalance();
                if (result !== undefined) {
                    if (result !== initialValue) {
                        changed = true;
                        break;
                    }
                }
                yield this.wait(5);
            }
            return changed;
        });
    }
    wait(time = 5) {
        return new Promise((resolve) => setTimeout(resolve, time * 1000));
    }
    generateBatchTransactions(transfers, lastRef) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!lastRef) {
                lastRef = yield this.network.getAddressLastAcceptedTransactionRef(this.address);
            }
            const txns = [];
            for (const transfer of transfers) {
                const { transaction, hash } = yield this.account.generateSignedTransactionWithHash(transfer.address, transfer.amount, transfer.fee, lastRef);
                lastRef = {
                    hash,
                    ordinal: lastRef.ordinal + 1,
                };
                txns.push(transaction);
            }
            return txns;
        });
    }
    sendBatchTransactions(transactions) {
        return __awaiter(this, void 0, void 0, function* () {
            const hashes = [];
            for (const txn of transactions) {
                const hash = yield this.network.postTransaction(txn);
                hashes.push(hash);
            }
            return hashes;
        });
    }
    transferBatch(transfers, lastRef) {
        return __awaiter(this, void 0, void 0, function* () {
            const txns = yield this.generateBatchTransactions(transfers, lastRef);
            return this.sendBatchTransactions(txns);
        });
    }
}
exports.MetagraphTokenClient = MetagraphTokenClient;
//# sourceMappingURL=metagraph-token-client.js.map